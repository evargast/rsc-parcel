import { Data, FormulaTransform, Mark, Scale, Signal, Spec } from 'vega';
import { BarOptions, BarSpecOptions, ColorScheme, HighlightedItem } from '../types';
export declare const addBar: (state: Spec, args_0: BarOptions & {
    colorScheme?: ColorScheme | undefined;
    highlightedItem?: HighlightedItem | undefined;
    index?: number | undefined;
    idKey: string;
}) => Spec;
export declare const addSignals: (state: Signal[], args_0: BarSpecOptions) => Signal[];
export declare const addData: (state: Data[], args_0: BarSpecOptions) => Data[];
/**
 * data aggregate used to calculate the min and max of the stack
 * used to figure out the corner radius of the bars
 * @param facets
 * @param barSpecOptions
 * @returns vega Data object
 */
export declare const getStackAggregateData: (options: BarSpecOptions) => Data;
export declare const getStackIdTransform: (options: BarSpecOptions) => FormulaTransform;
export declare const getDodgeGroupTransform: ({ color, lineType, name, opacity, type }: BarSpecOptions) => FormulaTransform;
export declare const addScales: (state: Scale[], args_0: BarSpecOptions) => Scale[];
export declare const addDimensionScale: (scales: Scale[], { dimension, paddingRatio, paddingOuter: barPaddingOuter, orientation }: BarSpecOptions) => void;
/**
 * adds scales for the secondary dimensions
 * If a bar is stacked and dodged,
 * @param scales
 * @param param1
 */
export declare const addSecondaryScales: (scales: Scale[], options: BarSpecOptions) => void;
export declare const addMarks: (state: Mark[], args_0: BarSpecOptions) => Mark[];
export declare const getRepeatedScale: (options: BarSpecOptions) => Scale;
//# sourceMappingURL=barSpecBuilder.d.ts.map