import { Axis, Data, Mark, ScaleType, Signal, Spec } from 'vega';
import { AxisOptions, AxisSpecOptions, ColorScheme, Label, Orientation, Position } from '../types';
export declare const addAxis: (state: Spec, args_0: AxisOptions & {
    colorScheme?: ColorScheme | undefined;
    index?: number | undefined;
}) => Spec;
export declare const addAxisData: (state: Data[], args_0: AxisSpecOptions & {
    scaleType: ScaleType;
}) => Data[];
export declare const addAxisSignals: (state: Signal[], args_0: AxisSpecOptions) => Signal[];
/**
 * Gets the labels that have style properties on them and gets the correct alignment value based on axis position
 * @param labels
 * @param position
 * @returns
 */
export declare const getLabelSignalValue: (labels: (Label | string | number)[], position: Position, labelOrientation: Orientation) => ({
    align: import("vega", { with: { "resolution-mode": "import" } }).Align | undefined;
    baseline: import("vega", { with: { "resolution-mode": "import" } }).Baseline | undefined;
    value: string | number;
    label?: string | undefined;
    fontWeight?: import("vega", { with: { "resolution-mode": "import" } }).FontWeight | undefined;
} | undefined)[];
export declare const addAxes: (state: Axis[], args_0: AxisSpecOptions & {
    scaleName: string;
    opposingScaleType?: string | undefined;
}) => Axis[];
export declare const addAxesMarks: (state: Mark[], args_0: AxisSpecOptions & {
    scaleName: string;
    scaleType?: ScaleType | undefined;
    opposingScaleType?: string | undefined;
}) => Mark[];
export declare function setAxisBaseline(axis: Axis, baseline?: boolean): Axis;
//# sourceMappingURL=axisSpecBuilder.d.ts.map