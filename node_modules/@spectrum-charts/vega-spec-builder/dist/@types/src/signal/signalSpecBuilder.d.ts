import { Signal } from 'vega';
/**
 * Does signal with given name exist?
 */
export declare const hasSignalByName: (signals: Signal[], name: string) => boolean;
/**
 *  Returns a controlled hover signal.
 *  Controlled hover signals get manually updated via the view in Chart.tsx
 */
export declare const getControlledHoveredIdSignal: (name: string) => Signal;
/**
 *  Returns a controlled hover signal.
 *  Controlled hover signals get manually updated via the view in Chart.tsx
 */
export declare const getControlledHoveredGroupSignal: (name: string) => Signal;
/**
 * Returns the highlighted series signal
 */
export declare const addHighlighSignalLegendHoverEvents: (signals: Signal[], legendName: string, includeHiddenSeries: boolean, keys?: string[]) => void;
export declare const getHighlightSignalUpdateExpression: (legendName: string, includeHiddenSeries: boolean, keys?: string[]) => string;
/**
 * Returns the legendLabels series signal
 */
export declare const getLegendLabelsSeriesSignal: (value?: unknown) => Signal;
/**
 * Returns a basic value based signal
 */
export declare const getGenericValueSignal: (name: string, value?: unknown) => Signal;
/**
 * Returns a basic value based signal
 */
export declare const getGenericUpdateSignal: (name: string, update: string) => Signal;
/**
 * adds on events to the highlighted item signal
 * @param signals
 * @param markName
 * @param datumOrder how deep the datum is nested (i.e. 1 becomes datum.rscMarkId, 2 becomes datum.datum.rscMarkId, etc.)
 * @param excludeDataKey data items with a truthy value for this key will be excluded from the signal
 */
export declare const addHighlightedItemSignalEvents: (signals: Signal[], markName: string, idKey: string, datumOrder?: number, excludeDataKeys?: string[]) => void;
/**
 * adds on events to the highlighted series signal
 * @param signals
 * @param markName
 * @param datumOrder how deep the datum is nested (i.e. 1 becomes datum.rscMarkId, 2 becomes datum.datum.rscMarkId, etc.)
 * @param excludeDataKey data items with a truthy value for this key will be excluded from the signal
 */
export declare const addHighlightedSeriesSignalEvents: (signals: Signal[], markName: string, datumOrder?: number, excludeDataKeys?: string[]) => void;
//# sourceMappingURL=signalSpecBuilder.d.ts.map