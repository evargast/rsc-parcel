import { EncodeEntry, GuideEncodeEntry, Mark, NumericValueRef, ProductionRule, RuleMark, ScaleType, SignalRef, SymbolMark, TextEncodeEntry, TextMark } from 'vega';
import { AxisSpecOptions, Position, ReferenceLineSpecOptions } from '../types';
export declare const getReferenceLines: (axisOptions: AxisSpecOptions) => ReferenceLineSpecOptions[];
export declare const scaleTypeSupportsReferenceLines: (scaleType: ScaleType | undefined) => boolean;
export declare const getReferenceLineMarks: (axisOptions: AxisSpecOptions, scaleName: string) => {
    back: Mark[];
    front: Mark[];
};
export declare const getPositionEncoding: ({ scaleType }: AxisSpecOptions, { value, position }: ReferenceLineSpecOptions, scaleName: string) => ProductionRule<NumericValueRef> | SignalRef;
export declare const getReferenceLineRuleMark: ({ position, ticks }: AxisSpecOptions, { color, colorScheme, name }: ReferenceLineSpecOptions, positionEncoding: ProductionRule<NumericValueRef> | SignalRef) => RuleMark;
/**
 * Gets the reference line symbol mark
 * @param AxisSpecOptions
 * @param ReferenceLineSpecOptions
 * @param referenceLineIndex
 * @param positionEncoding
 * @returns SymbolMark
 */
export declare const getReferenceLineSymbolMark: ({ colorScheme, position }: AxisSpecOptions, { icon, iconColor, name }: ReferenceLineSpecOptions, positionEncoding: ProductionRule<NumericValueRef> | SignalRef) => SymbolMark[];
/**
 * Gets the reference line text mark
 * @param AxisSpecOptions
 * @param ReferenceLineSpecOptions
 * @param referenceLineIndex
 * @param positionEncoding
 * @returns TextMark
 */
export declare const getReferenceLineTextMark: (axisOptions: AxisSpecOptions, referenceLineOptions: ReferenceLineSpecOptions, positionEncoding: ProductionRule<NumericValueRef> | SignalRef) => TextMark[];
/**
 * Gets the reference line label encoding
 * @param labelFontWeight
 * @param label
 * @param position
 * @param positionEncoding
 * @param icon
 * @returns updateEncoding
 */
export declare const getReferenceLineLabelsEncoding: ({ position }: AxisSpecOptions, { colorScheme, icon, label, labelColor, labelFontWeight }: ReferenceLineSpecOptions & {
    label: string;
}, positionEncoding: ProductionRule<NumericValueRef> | SignalRef) => GuideEncodeEntry<TextEncodeEntry>;
/**
 * Will return the label align or baseline based on the position
 * These properties are used within the reference line label encoding
 * If this is a vertical axis, it will return the correct baseline property and value
 * Otherwise, it will return the correct align property and value
 * @param position
 * @returns align | baseline
 */
export declare const getEncodedLabelBaselineAlign: (position: Position) => EncodeEntry;
//# sourceMappingURL=axisReferenceLineUtils.d.ts.map