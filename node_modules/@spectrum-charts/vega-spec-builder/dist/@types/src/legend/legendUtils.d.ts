import { ColorValueRef, FilterTransform, LegendEncode, NumericValueRef, ProductionRule, SignalRef } from 'vega';
import { ColorValueV6, FacetRef, FacetType, LegendSpecOptions, Position, SecondaryFacetType } from '../types';
export interface Facet {
    facetType: FacetType | SecondaryFacetType;
    field: string;
}
/**
 * Get the number of columns for the legend
 * @param position
 * @returns
 */
export declare const getColumns: (position: Position) => SignalRef | undefined;
/**
 * Gets the filter transform for hidden entries
 * @param hiddenEntries
 * @returns
 */
export declare const getHiddenEntriesFilter: (hiddenEntries: string[], name: string) => FilterTransform[];
/**
 * Get the legend encodings
 * @param facets
 * @param legendOptions
 * @returns
 */
export declare const getEncodings: (facets: Facet[], legendOptions: LegendSpecOptions) => LegendEncode;
/**
 * simple opacity encoding for legend labels and the symbol stroke opacity
 * @param legendOptions
 * @returns opactiy encoding
 */
export declare const getOpacityEncoding: ({ highlight, highlightedSeries, keys, }: LegendSpecOptions) => ProductionRule<NumericValueRef> | undefined;
export declare const getSymbolEncodings: (facets: Facet[], options: LegendSpecOptions) => LegendEncode;
export declare const getHiddenSeriesColorRule: ({ colorScheme, hiddenSeries, isToggleable, keys, name }: LegendSpecOptions, colorValue: ColorValueV6) => ({
    test?: string;
} & ColorValueRef)[];
/**
 * Gets the required encondings for show/hide toggleable legends
 * @param isToggleable
 * @returns
 */
export declare const getShowHideEncodings: (options: LegendSpecOptions) => LegendEncode;
/**
 * Merge multiple vega spec legend encodings
 * @param encodings
 * @returns
 */
export declare const mergeLegendEncodings: (encodings: LegendEncode[]) => LegendEncode;
/**
 * Gets the symbol type (shape) for the legend
 * @param symbolShape
 * @returns symbolShape
 */
export declare const getSymbolType: (symbolShape: FacetRef<string> | undefined) => string;
//# sourceMappingURL=legendUtils.d.ts.map