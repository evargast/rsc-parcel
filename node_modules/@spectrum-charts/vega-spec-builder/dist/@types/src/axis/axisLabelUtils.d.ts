import { Align, Baseline, EncodeEntry, FontWeight, GuideEncodeEntry, NumberValue, ProductionRule, TextEncodeEntry, TextValueRef, TickCount } from 'vega';
import { AxisSpecOptions, Granularity, Label, LabelAlign, Orientation, Position } from '../types';
/**
 * Gets the display value of the label. If it's an object, it will return the value property, otherwise it will return the label.
 * @param label
 * @returns string | number
 */
export declare const getLabelValue: (label: Label | number | string) => string | number;
/**
 * Gets the label format values based on the granularity
 * @param granularity
 * @returns [secondaryFormat, primaryFormat, tickCount]
 */
export declare const getTimeLabelFormats: (granularity: Granularity) => {
    secondaryLabelFormat: string;
    primaryLabelFormat: string;
    tickCount: TickCount;
};
/**
 * label align can be set in a controlled manner using the `labels` and `subLabels` options
 * This function will return the correct align and baseline encodings based on the labelAlign and position
 * @param position
 * @param labelOrientaion
 * @param labelAlign
 * @returns align and baseline
 */
export declare const getControlledLabelAnchorValues: (position: Position, labelOrientaion: Orientation, labelAlign?: LabelAlign) => {
    align: Align | undefined;
    baseline: Baseline | undefined;
};
/**
 * gets the values for labelAlign and labelBaseline based on the `labelAlign`, `labelOrientation`, and `position` options
 * vegaLabelAlign and vegaLabelBaseline options can be used to override these values
 * @param position
 * @param labelOrientaion
 * @param labelAlign
 * @param vegaLabelAlign
 * @param vegaLabelBaseline
 * @returns labelAlign and labelBaseline
 */
export declare const getLabelAnchorValues: (position: Position, labelOrientaion: Orientation, labelAlign: LabelAlign, vegaLabelAlign?: Align, vegaLabelBaseline?: Baseline) => {
    labelAlign: Align;
    labelBaseline: Baseline;
};
/**
 * gets the label align and baseline values based on the `labelAlign`, `labelOrientation`, and `position` options
 * @param position
 * @param labelOrientaion
 * @param labelAlign
 * @returns align and baseline
 */
export declare const getLabelAnchor: (position: Position, labelOrientaion: Orientation, labelAlign: LabelAlign) => {
    align: Align;
    baseline: Baseline;
};
/**
 * determines if the label orientation is parallel to the axis direction
 * @param position
 * @param labelOrientaion
 * @returns boolean
 */
export declare const labelIsParallelToAxis: (position: Position, labelOrientaion: Orientation) => boolean;
/**
 * gets the label angle based on the `labelOrientation` prop
 * @param labelOrientaion
 * @returns labelAngle: number
 */
export declare const getLabelAngle: (labelOrientaion: Orientation) => number;
/**
 * gets the vega baseline value based on the labelAlign value
 * @param labelAlign
 * @returns
 */
export declare const getLabelBaseline: (labelAlign: LabelAlign | undefined, position: Position, vegaLabelBaseline?: Baseline) => Baseline | undefined;
/**
 * calculates the label offset for a band scale based on the labelAlign
 * @param labelAlign
 * @param scaleName
 * @returns
 */
export declare const getLabelOffset: (labelAlign: LabelAlign, scaleName: string, vegaLabelOffset?: NumberValue) => NumberValue | undefined;
/**
 * gets the vega label format based on the labelFormat
 * @param type
 * @returns
 */
export declare const getLabelFormat: ({ labelFormat, labelOrientation, numberFormat, position, truncateLabels, currencyLocale, currencyCode, }: AxisSpecOptions, scaleName: string) => ProductionRule<TextValueRef>;
/**
 * Gets the axis label encoding
 * @param labelAlign
 * @param labelFontWeight
 * @param labelKey
 * @param position
 * @param signalName
 * @returns updateEncoding
 */
export declare const getAxisLabelsEncoding: (labelAlign: LabelAlign, labelFontWeight: FontWeight, labelKey: 'label' | 'subLabel', labelOrientation: Orientation, position: Position, signalName: string) => GuideEncodeEntry<TextEncodeEntry>;
/**
 * Will return the label align or baseline based on the position
 * These properties are used within the axis label encoding
 * If this is a vertical axis, it will return the correct baseline property and value
 * Otherwise, it will return the correct align property and value
 * @param position
 * @param signalName
 * @param defaultLabelAlign
 * @returns align | baseline
 */
export declare const getEncodedLabelAnchor: (position: Position, signalName: string, labelOrientation: Orientation, defaultLabelAlign: LabelAlign) => EncodeEntry;
//# sourceMappingURL=axisLabelUtils.d.ts.map