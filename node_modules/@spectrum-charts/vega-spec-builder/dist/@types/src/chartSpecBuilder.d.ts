import { Data, LinearScale, OrdinalScale, PointScale, Signal, Spec } from 'vega';
import { ChartColors, ChartOptions, ChartSpecOptions, ColorScale, ColorScheme, Colors, LineType, LineTypes, LineWidth, Opacities, SymbolShapes, SymbolSize } from './types';
export interface ChartSpecBuilder {
    buildSpec: (options: ChartOptions) => Spec;
}
export declare function buildSpec({ axes, backgroundColor, colors, colorScheme, description, hiddenSeries, highlightedItem, highlightedSeries, idKey, legends, lineTypes, lineWidths, marks, opacities, symbolShapes, symbolSizes, title, titles, }: ChartOptions): Spec;
export declare const removeUnusedScales: (state?: Spec | undefined) => Spec;
export declare const getDefaultSignals: ({ backgroundColor, colors, colorScheme, lineTypes, opacities, hiddenSeries, highlightedItem, highlightedSeries, }: ChartSpecOptions) => Signal[];
export declare const getTwoDimensionalColorScheme: (colors: ChartColors, colorScheme: ColorScheme) => string[][];
export declare const getTwoDimensionalLineTypes: (lineTypes: LineTypes) => number[][][];
export declare const getTwoDimensionalOpacities: (opacities: Opacities | undefined) => number[][];
export declare const getColorScale: (colors: ChartColors, colorScheme: ColorScheme) => OrdinalScale;
export declare const getLinearColorScale: (colors: ChartColors, colorScheme: ColorScheme) => LinearScale;
export declare const getLineTypeScale: (lineTypes: LineTypes) => OrdinalScale;
export declare const getSymbolShapeScale: (symbolShapes: SymbolShapes) => OrdinalScale;
/**
 * returns the symbol size scale
 * @param symbolSizes
 * @returns LinearScale
 */
export declare const getSymbolSizeScale: (symbolSizes: [SymbolSize, SymbolSize]) => LinearScale;
/**
 * returns the path width scale
 * @param symbolSizes
 * @returns LinearScale
 */
export declare const getSymbolPathWidthScale: (symbolSizes: [SymbolSize, SymbolSize]) => LinearScale;
export declare const getLineWidthScale: (lineWidths: LineWidth[]) => OrdinalScale;
export declare const getOpacityScale: (opacities?: Opacities) => OrdinalScale | PointScale;
/**
 * Adds a formula transform to the TABLE data that combines all the facets into a single key
 */
export declare const addData: (state: Data[], args_0: {
    facets: string[];
}) => Data[];
export declare const isColorScale: (colors: ChartColors) => colors is ColorScale;
export declare const isColors: (colors: ChartColors) => colors is Colors;
export declare const isLineTypeArray: (lineTypes: LineTypes) => lineTypes is LineType[];
export declare const isStrokeDashArray: (lineType: LineType | LineType[]) => lineType is number[];
export declare const isNumberArray: (opacities: Opacities) => opacities is number[];
export declare const isSymbolShapeArray: (symbolShapes: SymbolShapes) => symbolShapes is string[];
//# sourceMappingURL=chartSpecBuilder.d.ts.map