import { SignalRef } from 'vega';
import { AggregateMethod, BarSpecOptions, ColorFacet, LineSpecOptions, LineTypeFacet, Orientation, RegressionMethod as RscRegressionMethod, ScaleType, ScatterSpecOptions, TrendlineMethod, TrendlineOptions, TrendlineSpecOptions } from '../types';
/** These are all the spec options that currently support trendlines */
export type TrendlineParentOptions = LineSpecOptions | ScatterSpecOptions | BarSpecOptions;
/**
 * gets all the trendlines from the children and applies all the default trendline options
 * @param children
 * @param markName
 * @returns TrendlineSpecOptions[]
 */
export declare const getTrendlines: (markOptions: TrendlineParentOptions) => TrendlineSpecOptions[];
/**
 * applies all the default trendline options
 * @param param0
 * @param markName
 * @param index
 * @returns TrendlineSpecOptions
 */
export declare const applyTrendlinePropDefaults: (markOptions: TrendlineParentOptions, { chartTooltips, color, dimensionExtent, dimensionRange, displayOnHover, highlightRawPoint, lineType, lineWidth, method, opacity, orientation, trendlineAnnotations, ...opts }: TrendlineOptions, index: number) => TrendlineSpecOptions;
/**
 * Gets the color from the parent options.
 * Simplifies dual facet colors into a single facet
 * @param color
 * @returns color
 */
export declare const getTrendlineColorFromMarkOptions: (color: TrendlineParentOptions['color']) => ColorFacet;
/**
 * Gets the color from the parent options.
 * Simplifies dual facet colors into a single facet
 * @param lineType
 * @returns color
 */
export declare const getTrendlineLineTypeFromMarkOptions: (lineType: TrendlineParentOptions['lineType']) => LineTypeFacet;
/**
 * Gets the metric and dimension for the trendline, taking into account the orientation.
 * if isDimensionNormalized is true, the trendlineDimension will have `Normalized` appended to it
 * @param dimension
 * @param metric
 * @param orientation
 * @param isDimensionNormalized
 * @returns \{trendlineDimension: string, trendlineMetric: string}
 */
export declare const getTrendlineDimensionMetric: (dimension: string, metric: string, orientation: Orientation, isDimensionNormalized: boolean) => {
    trendlineDimension: string;
    trendlineMetric: string;
};
/**
 * If the dimension should be normalized, returns the normalized dimension name, otherwise returns the original dimension
 * @param dimension
 * @param method
 * @param scaleType
 * @returns dimension name
 */
export declare const normalizeTrendlineDimensionName: (dimension: string, isDimensionNormalized: boolean) => string;
/**
 * determines if the supplied method is an aggregate method (average, median)
 * @see https://vega.github.io/vega/docs/transforms/aggregate/
 * @param method
 * @returns boolean
 */
export declare const isAggregateMethod: (method: TrendlineMethod) => method is AggregateMethod;
/**
 * determines if the supplied method is a regression method
 * @see https://vega.github.io/vega/docs/transforms/regression/
 * @param method
 * @returns boolean
 */
export declare const isRegressionMethod: (method: TrendlineMethod) => method is RscRegressionMethod;
/**
 * determines if the supplied method is a windowing method
 * @see https://vega.github.io/vega/docs/transforms/window/
 * @param method
 * @returns boolean
 */
export declare const isWindowMethod: (method: TrendlineMethod) => method is `movingAverage-${number}`;
/**
 * determines if the supplied method is a polynomial method
 * @see https://vega.github.io/vega/docs/transforms/regression/
 * @param method
 * @returns boolean
 */
export declare const isPolynomialMethod: (method: TrendlineMethod) => boolean;
/**
 * determines if any trendlines use the normalized dimension
 * @param markOptions
 * @returns boolean
 */
export declare const hasTrendlineWithNormalizedDimension: (markOptions: TrendlineParentOptions) => boolean;
/**
 * gets the order of the polynomial
 * y = a + b * x + â€¦ + k * pow(x, order)
 * @see https://vega.github.io/vega/docs/transforms/regression/
 * @param method trendline method
 * @returns order
 */
export declare const getPolynomialOrder: (method: TrendlineMethod) => number;
/**
 * gets the extent used in the regression transform
 * @param dimensionExtent
 * @param name
 * @param isNormalized
 * @returns
 */
export declare const getRegressionExtent: (dimensionExtent: TrendlineSpecOptions['dimensionExtent'], name: string, isNormalized: boolean) => SignalRef;
export declare const getTrendlineScaleType: (markOptions: TrendlineParentOptions, trendlineOrientation: Orientation) => ScaleType;
//# sourceMappingURL=trendlineUtils.d.ts.map