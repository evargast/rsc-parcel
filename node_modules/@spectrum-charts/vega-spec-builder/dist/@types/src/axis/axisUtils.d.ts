import { Axis, Mark, Scale, SignalRef } from 'vega';
import { AxisSpecOptions, Position } from '../types';
/**
 * Generates a default vega axis from the axis options
 * @param axisOptions
 * @param scaleName
 * @returns axis
 */
export declare const getDefaultAxis: (axisOptions: AxisSpecOptions, scaleName: string) => Axis;
/**
 * Generates the time axes for a time scale from the axis options
 * @param scaleName
 * @param axisOptions
 * @returns axes
 */
export declare const getTimeAxes: (scaleName: string, axisOptions: AxisSpecOptions) => Axis[];
/**
 * Generates an axis for sub labels from the axis options
 * @param axisOptions
 * @param scaleName
 * @returns axis
 */
export declare const getSubLabelAxis: (axisOptions: AxisSpecOptions, scaleName: string) => Axis;
/**
 * Finds and returns the scale that this axis is for
 * If the scale does not exist, it will create a new one
 * @param scales
 * @param position
 * @returns scale
 */
export declare const getScale: (scales: Scale[], position: Position) => Scale;
/**
 * Gets the scale range from the position
 * @param position
 * @returns range
 */
export declare const getRange: (position: Position) => 'width' | 'height';
/**
 * Gets the scale type of the opposing scale.
 * For example, if this is an x-axis, it will return the y-scale type
 * @param scales
 * @param position
 * @returns scaleType
 */
export declare const getOpposingScaleType: (scales: Scale[], position: Position) => "linear" | "point" | "time" | "band" | "identity" | "ordinal" | "quantile" | "log" | "pow" | "utc" | "sequential" | "symlog" | "sqrt" | "quantize" | "threshold" | "bin-ordinal" | undefined;
/**
 * Gets the scale range for the opposing scale
 * @param position
 * @returns
 */
export declare const getOpposingRange: (position: Position) => 'width' | 'height';
/**
 * Returns whether the axis is vertical.
 * @param position
 * @returns boolean
 */
export declare const isVerticalAxis: (position: Position) => boolean;
/**
 * clamps the tick count to a min of 2 and max of 5 for linear scales
 * @param position
 * @param grid
 * @returns tickCount production rule
 */
export declare const getTickCount: (position: Position, grid: boolean) => SignalRef | undefined;
/**
 * Gets the baseline rule mark
 * @param baselineOffset
 * @param position
 * @returns baselineMark
 */
export declare const getBaselineRule: (baselineOffset: number, position: Position) => Mark;
export declare const hasSubLabels: ({ subLabels, labelOrientation }: AxisSpecOptions) => boolean;
//# sourceMappingURL=axisUtils.d.ts.map