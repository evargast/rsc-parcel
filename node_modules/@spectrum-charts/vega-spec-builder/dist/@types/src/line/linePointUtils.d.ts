import { ColorValueRef, NumericValueRef, SymbolMark } from 'vega';
import { LineSpecOptions, ProductionRuleTests } from '../types';
import { LineMarkOptions } from './lineUtils';
/**
 * Gets the point mark for static points on a line chart.
 * @param lineMarkOptions
 * @returns SymbolMark
 */
export declare const getLineStaticPoint: ({ name, metric, metricAxis, color, colorScheme, scaleType, dimension, isSparkline, pointSize, }: LineSpecOptions) => SymbolMark;
/**
 * Gets a background to points to prevent opacity from displaying elements behind the point.
 * @param lineMarkOptions
 * @returns SymbolMark
 */
export declare const getHighlightBackgroundPoint: (lineOptions: LineMarkOptions) => SymbolMark;
/**
 * Displays a point on hover on the line.
 * @param lineMarkOptions
 * @returns SymbolMark
 */
export declare const getHighlightPoint: (lineOptions: LineMarkOptions) => SymbolMark;
/**
 * Displays a point on select on the line.
 * @param lineMarkOptions
 * @returns SymbolMark
 */
export declare const getSelectionPoint: (lineOptions: LineMarkOptions) => SymbolMark;
/**
 * Displays a secondary highlight point on hover or select on the line.
 * @param lineMarkOptions
 * @param secondaryHighlightedMetric
 * @returns SymbolMark
 */
export declare const getSecondaryHighlightPoint: (lineOptions: LineMarkOptions, secondaryHighlightedMetric: string) => SymbolMark;
/**
 * gets the fill color for the highlighted point
 * @param lineMarkOptions
 * @returns fill rule
 */
export declare const getHighlightPointFill: (markOptions: LineMarkOptions) => ProductionRuleTests<ColorValueRef>;
/**
 * gets the stroke color for the highlighted point
 * @param lineMarkOptions
 * @returns stroke rule
 */
export declare const getHighlightPointStroke: (markOptions: LineMarkOptions) => ProductionRuleTests<ColorValueRef>;
/**
 * gets the stroke opacity for the highlighted point
 * @param lineMarkOptions
 * @returns stroke opacity rule
 */
export declare const getHighlightPointStrokeOpacity: ({ opacity, staticPoint, }: LineMarkOptions) => ProductionRuleTests<NumericValueRef>;
/**
 * gets the size for the highlighted point
 * @param lineMarkOptions
 * @returns size rule
 */
export declare const getHighlightPointSize: ({ staticPoint }: LineMarkOptions) => ProductionRuleTests<NumericValueRef>;
/**
 * gets the stroke width for the highlighted point
 * @param lineMarkOptions
 * @returns stroke width rule
 */
export declare const getHighlightPointStrokeWidth: ({ staticPoint, }: LineMarkOptions) => ProductionRuleTests<NumericValueRef>;
/**
 * Gets point that is used for the selection ring.
 * @param lineMarkOptions
 * @returns SymbolMark
 */
export declare const getSelectRingPoint: (lineOptions: LineMarkOptions) => SymbolMark;
//# sourceMappingURL=linePointUtils.d.ts.map