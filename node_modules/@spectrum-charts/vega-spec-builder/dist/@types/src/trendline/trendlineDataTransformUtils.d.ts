import { AggregateTransform, CollectTransform, ExtentTransform, FilterTransform, FormulaTransform, JoinAggregateTransform, LookupTransform, RegressionTransform, Transforms, WindowTransform } from 'vega';
import { TrendlineMethod, TrendlineSpecOptions } from '../types';
import { TrendlineParentOptions } from './trendlineUtils';
/**
 * Gets the aggreagate transform used for calculating the average trendline
 * @param markOptions
 * @param trendlineSpecOptions
 * @param isHighResolutionData
 * @returns transform
 */
export declare const getAggregateTransform: (markOptions: TrendlineParentOptions, { method, trendlineDimension, trendlineMetric }: TrendlineSpecOptions, isHighResolutionData: boolean) => AggregateTransform | JoinAggregateTransform;
/**
 * Gets the regression transform used for calculating the regression trendline.
 * Regression trendlines are ones that use the x value as a parameter
 * @see https://vega.github.io/vega/docs/transforms/regression/
 * @param markOptions
 * @param method
 * @param isHighResolutionData
 * @returns
 */
export declare const getRegressionTransform: (markOptions: TrendlineParentOptions, trendlineOptions: TrendlineSpecOptions, isHighResolutionData: boolean) => RegressionTransform;
/**
 * Gets the window transform used for calculating the moving average trendline.
 * @param markOptions
 * @param method
 * @returns
 */
export declare const getWindowTransform: (markOptions: TrendlineParentOptions, { method, trendlineMetric }: TrendlineSpecOptions) => WindowTransform;
/**
 * Gets the transforms that will normalize the dimension.
 * The dimension gets normalized for time scales on regression methods. This makes the regression calculations far more accurate than using the raw time values
 * @param dimension
 * @returns
 */
export declare const getNormalizedDimensionTransform: (dimension: string) => Transforms[];
/**
 * Gets an extent transform.
 * This is used to calculate the min and max of the dimension so that it can be used to set the extent of the regression trendline
 * @param dimension
 * @param name
 * @returns
 */
export declare const getRegressionExtentTransform: (dimension: string, name: string) => ExtentTransform;
/**
 * Gets the sort transform for the provided dimension.
 * This is used to sort window methods so they are calculated and drawn in the correct order
 * @param dimension
 * @returns CollectTransform
 */
export declare const getSortTransform: (dimension: string) => CollectTransform;
/**
 * gets the filter transforms that will restrict the data to the dimension range
 * @param dimension
 * @param dimensionRange
 * @returns filterTansforms
 */
export declare const getTrendlineDimensionRangeTransforms: (dimension: string, dimensionRange: [number | null, number | null]) => FilterTransform[];
/**
 * This transform is used to calculate the value of the trendline using the coef and the dimension
 * @param trendlineDimension mark dimension
 * @param method trenline method
 * @returns formula transorfm
 */
export declare const getTrendlineParamFormulaTransforms: (trendlineDimension: string, method: TrendlineMethod) => FormulaTransform[];
/**
 * Gets the lookup transform that will be used to lookup the coef for regression trendlines
 * @param markOptions
 * @param trendlineOptions
 * @returns LookupTransform
 */
export declare const getTrendlineParamLookupTransform: ({ color, lineType }: TrendlineParentOptions, { name }: TrendlineSpecOptions) => LookupTransform;
//# sourceMappingURL=trendlineDataTransformUtils.d.ts.map