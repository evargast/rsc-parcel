import { AreaMark, GroupMark, LineMark, Signal, SourceData } from 'vega';
import { LineSpecOptions, MetricRangeOptions, MetricRangeSpecOptions } from '../types';
export type MetricRangeParentOptions = LineSpecOptions;
export declare const getMetricRanges: (markOptions: MetricRangeParentOptions) => MetricRangeSpecOptions[];
export declare const applyMetricRangeOptionDefaults: ({ chartTooltips, lineType, lineWidth, rangeOpacity, metric, displayOnHover, ...options }: MetricRangeOptions, markName: string, index: number) => MetricRangeSpecOptions;
/**
 * gets the metric range group mark including the metric range line and area marks.
 * @param lineMarkOptions
 */
export declare const getMetricRangeGroupMarks: (lineMarkOptions: LineSpecOptions) => GroupMark[];
/**
 * gets the area and line marks for the metric range by combining line and metric range options.
 * @param lineMarkOptions
 * @param metricRangeOptions
 */
export declare const getMetricRangeMark: (lineMarkOptions: LineSpecOptions, metricRangeOptions: MetricRangeSpecOptions) => (LineMark | AreaMark)[];
/**
 * gets the data source for the metricRange
 * @param markOptions
 */
export declare const getMetricRangeData: (markOptions: LineSpecOptions) => SourceData[];
/**
 * gets the signals for the metricRange
 * @param markOptions
 */
export declare const getMetricRangeSignals: (markOptions: LineSpecOptions) => Signal[];
//# sourceMappingURL=metricRangeUtils.d.ts.map