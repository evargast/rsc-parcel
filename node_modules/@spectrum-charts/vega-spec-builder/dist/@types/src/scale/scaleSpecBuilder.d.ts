import { OrdinalScale, Scale } from 'vega';
import { DualFacet, FacetRef, FacetType, Orientation } from '../types';
type AxisType = 'x' | 'y';
type SupportedScaleType = 'linear' | 'point' | 'band' | 'time' | 'ordinal';
/**
 * Gets the first index for the given scale type and axis.
 *
 * If the scale doesn't exist, it gets created and the index of the new scale is returned.
 *
 * NOTE: this should only be called from a 'produce' function since it mutates the scales
 */
export declare const getScaleIndexByType: (scales: Scale[], type: SupportedScaleType, axis: AxisType, scaleName?: string) => number;
/**
 * Gets the first index for the given scale name.
 *
 * If the scale doesn't exist, it gets created and the index of the new scale is returned.
 *
 * NOTE: this should only be called from a 'produce' function since it mutates the scales
 */
export declare const getScaleIndexByName: (scales: Scale[], name: string, type?: SupportedScaleType) => number;
export declare const addDomainFields: (state: Scale, args_0: string[]) => Scale;
export declare const addContinuousDimensionScale: (scales: Scale[], { scaleType, dimension, padding }: {
    scaleType: SupportedScaleType;
    dimension: string;
    padding?: number;
}) => void;
/**
 * Checks if the metric scale already exists
 * If it does, it adds the new metricKeys to the domain
 * If it doesn't, it creates a new scale and adds the metricKeys to the domain
 * @param scales
 * @param values
 * @param metricAxis
 * @param scaleName
 */
export declare const addMetricScale: (scales: Scale[], metricKeys: string[], metricAxis?: AxisType, scaleName?: string) => void;
/**
 * Generates a metric scale and returns it
 * NOTE: Does not check if the metric scale already exists
 * @param metricKeys
 * @param metricAxis
 * @returns
 */
export declare const getMetricScale: (metricKeys: string[], metricAxis: AxisType, chartOrientation: Orientation) => Scale;
/**
 * adds the field to the facet scale domain if it isn't a static value
 * @param scales
 * @param facetType
 * @param facetValue
 */
export declare const addFieldToFacetScaleDomain: (scales: Scale[], facetType: FacetType, facetValue: FacetRef<string | number | number[]> | DualFacet | undefined) => void;
export declare const generateScale: (type: SupportedScaleType, axis: AxisType, options?: Partial<Scale>) => Scale;
export declare const getDefaultScale: (scaleType: SupportedScaleType, axis: AxisType, chartOrientation?: Orientation) => Scale;
/**
 * Sets the appropriate axis padding based on type.
 *
 * Discrete scales use a relative value where padding is step size * padding [0-1].
 * Continuous scales use a pixel value for padding.
 */
export declare const getPadding: (type: SupportedScaleType | 'band') => {
    paddingInner: number;
    paddingOuter: number;
    padding?: undefined;
} | {
    padding: number;
    paddingInner?: undefined;
    paddingOuter?: undefined;
} | {
    paddingOuter: number;
    paddingInner?: undefined;
    padding?: undefined;
} | {
    paddingInner?: undefined;
    paddingOuter?: undefined;
    padding?: undefined;
};
export declare const getBandPadding: (paddingRatio: number, paddingOuter?: number) => {
    paddingInner: number;
    paddingOuter: number;
};
/**
 * Gets the name of the scale based on the axis and type
 * @param axis
 * @param type
 * @returns scale name
 */
export declare const getScaleName: (axis: AxisType, type: SupportedScaleType) => string;
export declare const getOrdinalScale: (name: string, range: OrdinalScale['range']) => OrdinalScale;
export {};
//# sourceMappingURL=scaleSpecBuilder.d.ts.map