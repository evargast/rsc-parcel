/// <reference types="@spectrum-charts/themes/node_modules/vega" />
import { Data, Spec } from 'vega';
import { SanitizedSpecProps } from '../types';
export default function useSpec({ backgroundColor, children, colors, colorScheme, data, description, hiddenSeries, highlightedItem, highlightedSeries, idKey, lineTypes, lineWidths, opacities, symbolShapes, symbolSizes, title, UNSAFE_vegaSpec, }: SanitizedSpecProps): Spec;
/**
 * Check to see if the data array is an array of Vega datasets instead of an array of values.
 * @param data The data array to check
 * @returns True if it's an array of Vega datasets, false if it's an array of values
 */
export declare const isVegaData: (data: any) => data is Data[];
/**
 * The inverse of `mergeValuesIntoData`. Given an array of Vega datasets, extract the values from
 * each dataset and return an object of key/value pairs where the key is the dataset name and the
 * value is the array of values.
 * @param data An array of Vega datasets with values contained within
 * @returns An object of key/value pairs where the key is the dataset name and the value is the
 * array of values
 */
export declare const extractValues: (data: any) => any;
//# sourceMappingURL=useSpec.d.ts.map