import { GroupMark, NumericValueRef, ProductionRule, RectEncodeEntry } from 'vega';
import { BarAnnotationStyleOptions, BarSpecOptions, Orientation } from '../types';
type AnnotationWidth = {
    value: number;
} | {
    signal: string;
};
/**
 * Gets the annotation marks for the bar chart. Returns an empty array if no annotation is provided on the bar children.
 * @param barOptions
 * @param dataName
 * @param dimensionScaleName
 * @param dimensionName
 * @returns GroupMark[]
 */
export declare const getAnnotationMarks: (barOptions: BarSpecOptions, dataName: string, dimensionScaleName: string, dimensionName: string) => GroupMark[];
/**
 * Gets the minimum band width needed to display the annotations based on the bar orientation
 * @param orientation
 * @returns number
 */
export declare const getMinBandwidth: (orientation: Orientation) => number;
/**
 * Gets the x position encoding for the annotation background
 * @param width
 * @returns RectEncodeEntry
 */
export declare const getAnnotationXEncode: (width?: number) => RectEncodeEntry;
export declare const getAnnotationWidth: (textKey: string, style?: BarAnnotationStyleOptions) => AnnotationWidth;
/**
 * Offset calculation to make sure the annotation does not overlap the baseline
 * @param barOptions
 * @param annotationWidth
 * @returns string
 */
export declare const getAnnotationPositionOffset: ({ orientation }: BarSpecOptions, annotationWidth: AnnotationWidth) => string;
/**
 * Gets the metric position for the annotation text.
 * This ensures that the annotation does not overlap the baseline.
 * @param barOptions
 * @param annotationWidth
 * @returns NumericValueref
 */
export declare const getAnnotationMetricAxisPosition: (options: BarSpecOptions, annotationWidth: AnnotationWidth) => ProductionRule<NumericValueRef>;
export {};
//# sourceMappingURL=barAnnotationUtils.d.ts.map