import { EncodeEntryName, GroupMark, NumericValueRef, ProductionRule, Signal, SourceData, TextBaselineValueRef, TextEncodeEntry, TextValueRef, ThresholdScale } from 'vega';
import { DonutSpecOptions, DonutSummarySpecOptions } from '../types';
/**
 * Gets the data for the donut summary
 * @param donutOptions
 * @returns SourceData[]
 */
export declare const getDonutSummaryData: (donutOptions: DonutSpecOptions) => SourceData[];
/**
 * Gets the required scales for the donut summary
 * @param donutOptions
 * @returns ThresholdScale[]
 */
export declare const getDonutSummaryScales: (donutOptions: DonutSpecOptions) => ThresholdScale[];
/**
 * Gets the signals for the donut summary
 * @param donutOptions
 * @returns Signal[]
 */
export declare const getDonutSummarySignals: (donutOptions: DonutSpecOptions) => Signal[];
/**
 * Gets all the marks for the donut summary
 * @param donutOptions
 * @returns GroupMark[]
 */
export declare const getDonutSummaryMarks: (options: DonutSpecOptions) => GroupMark[];
/**
 * Gets the group mark for the donut summary
 * @param donutSummaryOptions
 * @returns GorupMark
 */
export declare const getDonutSummaryGroupMark: (options: DonutSummarySpecOptions) => GroupMark;
/**
 * Gets the group mark for a boolean donut summary
 * @param donutSummaryOptions
 * @returns GroupMark
 */
export declare const getBooleanDonutSummaryGroupMark: (options: DonutSummarySpecOptions) => GroupMark;
/**
 * Gets the text value for the summary value
 * @param donutSummaryOptions
 * @returns TextValueref
 */
export declare const getSummaryValueText: ({ donutOptions, numberFormat, }: DonutSummarySpecOptions) => ProductionRule<TextValueRef>;
/**
 * Gets the baseline for the summary value
 * @param label
 * @returns TextBaselineValueRef
 */
export declare const getSummaryValueBaseline: (label?: string) => TextBaselineValueRef;
/**
 * Gets the limit for the summary value
 * @param donutSummaryOptions
 * @returns NumericValueRef
 */
export declare const getSummaryValueLimit: ({ donutOptions, label }: DonutSummarySpecOptions) => NumericValueRef;
/**
 * Gets the encode for the metric label
 * @param donutSummaryOptions
 * @returns encode
 */
export declare const getSummaryLabelEncode: ({ donutOptions, label, }: DonutSummarySpecOptions & {
    label: string;
}) => Partial<Record<EncodeEntryName, TextEncodeEntry>>;
//# sourceMappingURL=donutSummaryUtils.d.ts.map