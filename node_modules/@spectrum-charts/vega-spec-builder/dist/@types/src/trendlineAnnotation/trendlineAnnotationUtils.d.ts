import { ColorValueRef, GroupMark, NumericValueRef, ProductionRule, RectMark, TextMark } from 'vega';
import { ColorFacet, TrendlineAnnotationOptions, TrendlineAnnotationSpecOptions, TrendlineSpecOptions } from '../types';
/**
 * Applies all trendline annotation defaults
 * @param trenlineAnnotationOptions
 * @param index
 * @param trendlineOptions
 * @param markName
 * @returns TrendlineAnnotationSpecOptions
 */
export declare const getTrendlineAnnotationSpecOptions: ({ badge, dimensionValue, numberFormat, prefix }: TrendlineAnnotationOptions, index: number, { colorScheme, dimensionExtent, dimensionScaleType, displayOnHover, lineWidth, orientation, trendlineColor, trendlineDimension, name: trendlineName, }: TrendlineSpecOptions, markName: string) => TrendlineAnnotationSpecOptions;
/**
 * Gets all the annotations on a trendline
 * @param trendlineOptions
 * @param markName
 * @returns TrendlineAnnotationSpecOptions[]
 */
export declare const getTrendlineAnnotations: (trendlineOptions: TrendlineSpecOptions, markName: string) => TrendlineAnnotationSpecOptions[];
/**
 * Gets all the trendline annotation marks
 * @param trendlineOptions
 * @param markName
 * @returns GroupMark[]
 */
export declare const getTrendlineAnnotationMarks: (trendlineOptions: TrendlineSpecOptions, markName: string) => GroupMark[];
/**
 * Gets the correct x rule for the annotation point
 * @param trendlineAnnotationOptions
 * @returns NumericValueRef
 */
export declare const getTrendlineAnnotationPointX: ({ dimensionValue, trendlineDimension, trendlineDimensionExtent, trendlineDimensionScaleType, trendlineOrientation, }: TrendlineAnnotationSpecOptions) => NumericValueRef;
/**
 * Gets the correct y rule for the annotation point
 * @param trendlineAnnotationOptions
 * @returns NumericValueRef
 */
export declare const getTrendlineAnnotationPointY: ({ dimensionValue, trendlineDimension, trendlineDimensionExtent, trendlineOrientation, }: TrendlineAnnotationSpecOptions) => NumericValueRef;
/**
 * Gets the annotation text mark
 * @param trendlineAnnotationOptions
 * @returns TextMark
 */
export declare const getTrendlineAnnotationTextMark: (annotation: TrendlineAnnotationSpecOptions) => TextMark;
/**
 * Get's the encoding for the annotation text fill.
 * Includes a color contrast check to ensure the text is visually a11y.
 * @param trendlineAnnotationOptions
 * @returns fill ProductionRule
 */
export declare const getTextFill: ({ badge, colorScheme, trendlineColor, }: TrendlineAnnotationSpecOptions) => ProductionRule<ColorValueRef> | undefined;
export declare const getTrendlineAnnotationBadgeMark: ({ badge, colorScheme, name, trendlineColor, }: TrendlineAnnotationSpecOptions) => RectMark[];
/**
 * Gets the key used for color.
 * Since some of the marks base their data off of previous marks, the datum might be nested.
 * @param trendlineColor
 * @param datumOrder how many levels deep the datum is (ex. 1 becomes datum.color, 2 becomes datum.datum.color, etc.)
 * @returns
 */
export declare const getColorKey: (trendlineColor: ColorFacet, datumOrder?: number) => ColorFacet;
//# sourceMappingURL=trendlineAnnotationUtils.d.ts.map