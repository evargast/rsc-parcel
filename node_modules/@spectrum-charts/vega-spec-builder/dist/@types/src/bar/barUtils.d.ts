import { ArrayValueRef, ColorValueRef, EncodeEntry, GroupMark, NumericValueRef, ProductionRule, RectEncodeEntry, RectMark } from 'vega';
import { BarSpecOptions, Orientation } from '../types';
/**
 * checks to see if the bar is faceted in the stacked and dodged dimensions
 * @param color
 */
export declare const isDodgedAndStacked: ({ color, lineType, opacity }: BarSpecOptions) => boolean;
export declare const getDodgedGroupMark: (options: BarSpecOptions) => GroupMark;
export declare const getDodgedDimensionEncodings: (options: BarSpecOptions) => RectEncodeEntry;
export declare const getTrellisedDimensionEncodings: (options: BarSpecOptions) => RectEncodeEntry;
export declare const getMetricEncodings: (options: BarSpecOptions) => RectEncodeEntry;
export declare const getStackedMetricEncodings: (options: BarSpecOptions) => RectEncodeEntry;
export declare const getCornerRadiusEncodings: (options: BarSpecOptions) => RectEncodeEntry;
export declare const getStackedCornerRadiusEncodings: ({ name, metric, lineWidth, hasSquareCorners, }: BarSpecOptions) => RectEncodeEntry;
export declare const rotateRectClockwiseIfNeeded: (rectEncodeEntry: RectEncodeEntry, { orientation }: BarSpecOptions) => RectEncodeEntry;
export declare const getBaseBarEnterEncodings: (options: BarSpecOptions) => EncodeEntry;
export declare const getBarEnterEncodings: ({ chartTooltips, color, colorScheme, name, opacity, }: BarSpecOptions) => EncodeEntry;
export declare const getBarUpdateEncodings: (options: BarSpecOptions) => EncodeEntry;
export declare const getStroke: ({ name, chartPopovers, color, colorScheme, idKey, }: BarSpecOptions) => ProductionRule<ColorValueRef>;
export declare const getDimensionSelectionRing: (options: BarSpecOptions) => RectMark;
export declare const getStrokeDash: ({ chartPopovers, idKey, lineType }: BarSpecOptions) => ProductionRule<ArrayValueRef>;
export declare const getStrokeWidth: ({ chartPopovers, idKey, lineWidth, name, }: BarSpecOptions) => ProductionRule<NumericValueRef>;
export declare const getBarPadding: (paddingRatio: number, paddingOuter?: number) => {
    paddingInner: number;
    paddingOuter: number;
};
export declare const getScaleValues: (options: BarSpecOptions) => string[];
export interface BarOrientationProperties {
    metricAxis: 'x' | 'y';
    dimensionAxis: 'x' | 'y';
    metricScaleKey: string;
    dimensionScaleKey: 'xBand' | 'yBand';
    rangeScale: 'width' | 'height';
}
export declare const getOrientationProperties: (orientation: Orientation, scaleName?: string) => BarOrientationProperties;
//# sourceMappingURL=barUtils.d.ts.map