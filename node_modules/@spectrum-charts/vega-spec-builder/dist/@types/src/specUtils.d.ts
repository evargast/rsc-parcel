import { Data, Scale, ScaleType, Spec } from 'vega';
import { ChartSpecOptions, ChartSymbolShape, ColorFacet, DualFacet, Icon, LineType, LineTypeFacet, LineWidth, NumberFormat, OpacityFacet, SymbolSize, SymbolSizeFacet } from './types';
/**
 * gets all the keys that are used to facet by
 * @param facetOptions
 * @returns facets
 */
export declare const getFacetsFromOptions: ({ color, lineType, opacity, size, }: {
    color?: ColorFacet | DualFacet;
    lineType?: LineTypeFacet | DualFacet;
    opacity?: OpacityFacet | DualFacet;
    size?: SymbolSizeFacet;
}) => {
    facets: string[];
    secondaryFacets: string[];
};
/**
 * gets all the keys that have been used to facet the data into series from the scales
 * @param scales
 * @returns
 */
export declare const getFacetsFromScales: (scales?: Scale[]) => string[];
/**
 * gets the strokeDash array from the lineType
 * @param lineType
 * @returns strokeDash array
 */
export declare const getStrokeDashFromLineType: (lineType: LineType) => number[];
/**
 * gets the line width pixel value from the lineWidth
 * @param lineWidth
 * @returns line width pixel value
 */
export declare const getLineWidthPixelsFromLineWidth: (lineWidth: LineWidth) => number;
/**
 * get the SVG path for the symbol shape
 * @param symbolShape supported shape name or custom SVG path
 * @returns SVG path
 */
export declare const getPathFromSymbolShape: (symbolShape: ChartSymbolShape) => string;
/**
 * gets the strokeDash array from the lineType
 * @param icon
 * @returns strokeDash array
 */
export declare const getPathFromIcon: (icon: Icon | string) => string;
/**
 * Converts a symbolSize to the vega size
 * RSC uses the width of the symbol to determine the size
 * Vega uses the area of the symbol to determine the size
 * @param symbolSize
 * @returns size in square pixels
 */
export declare const getVegaSymbolSizeFromRscSymbolSize: (symbolSize: SymbolSize) => number;
/**
 * Gets the width of the symbol or trail from the symbolSize
 * @param symbolSize
 * @returns width in pixels
 */
export declare const getSymbolWidthFromRscSymbolSize: (symbolSize: SymbolSize) => number;
/**
 * base data that gets initialized with every uncontrolled spec
 */
export declare const baseData: Data[];
/**
 * Merges an optionally supplied spec with Chart options and default values.
 *
 * @param spec - The spec to merge with the base spec. If none is supplied, the base spec is returned.
 * @param chartOptions - A partial set of chart options to spread on to the spec.
 * @returns Spec with default values
 */
export declare const initializeSpec: (spec?: Spec | null, chartOptions?: Partial<ChartSpecOptions>) => Spec;
/**
 * The inverse of `extractValues`. Given an array of Vega datasets and an object of key/value pairs
 * merge the values into the datasets.
 * @param data An array of Vega datasets
 * @param values An object of key/value pairs where the key is the dataset name and the value is
 * the array of values
 * @returns An array of Vega datasets with the values from the values object merged in
 */
export declare const mergeValuesIntoData: (data: any, values: any) => any;
/**
 * returns the correct data field to use as the dimension
 * @param dimension
 * @param scaleType
 * @returns string
 */
export declare const getDimensionField: (dimension: string, scaleType?: ScaleType) => string;
/**
 * Gets the d3 format specifier for named number formats.
 * shortNumber and shortCurrency are not included since these require additional logic
 * @param numberFormat
 * @returns
 */
export declare const getD3FormatSpecifierFromNumberFormat: (numberFormat: NumberFormat | string) => string;
//# sourceMappingURL=specUtils.d.ts.map